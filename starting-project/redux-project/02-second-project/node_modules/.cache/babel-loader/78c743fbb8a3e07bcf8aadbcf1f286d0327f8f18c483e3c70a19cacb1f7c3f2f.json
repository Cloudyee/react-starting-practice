{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\project\\\\starting-project\\\\redux-project\\\\02-second-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState, Fragment } from 'react';\nimport { uiActions } from './components/store/ui-slice';\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport Notification from './components/UI/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //state를 통해 현재 상태를 자동으로 수신\n  //컴포넌트에서 활용할 데이터를 반환\n  /*\n  index.js의 코드를 살펴보면 아래와 같이 reudcer를 정의\n    const store = configureStore({\n      reducer:{ui:uiSlice.reducer}\n  })\n  따라서, 위 reducer의 키값 ui를 활용하여 이에 접근해야한다.\n  */\n  const showCart = useSelector(state => state.ui.cartIsVisible);\n  const dispatch = useDispatch();\n  const cart = useSelector(state => state.cart);\n  const notification = useSelector(state => state.ui.notification());\n\n  //장바구니에 변경이 일어날 때 마다 요청이 날아감\n  useEffect(() => {\n    const sendCartData = async () => {\n      dispatch(uiActions.showNotification({\n        status: 'pending',\n        tilte: 'Sending...',\n        message: 'Sending cart data!'\n      }));\n      const response = await fetch('https://react-practice-fd7f5-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        dispatch(uiActions.showNotification({\n          status: 'error',\n          tilte: 'Error!',\n          message: 'Sent cart data failed...'\n        }));\n      }\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        tilte: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    };\n    sendCartData().catch(error => {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        tilte: 'Error!',\n        message: 'Sent cart data failed...'\n      }));\n    });\n  }, [cart, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [notification && /*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [showCart && /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"b8J+7DpxB/EJ1wInGTJZpcIl/Mw=\", false, function () {\n  return [useSelector, useDispatch, useSelector, useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useSelector","useDispatch","useEffect","useState","Fragment","uiActions","Cart","Layout","Products","Notification","jsxDEV","_jsxDEV","App","_s","showCart","state","ui","cartIsVisible","dispatch","cart","notification","sendCartData","showNotification","status","tilte","message","response","fetch","method","body","JSON","stringify","ok","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/project/starting-project/redux-project/02-second-project/src/App.js"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState, Fragment } from 'react';\nimport { uiActions } from './components/store/ui-slice';\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport Notification from './components/UI/Notification';\n\nfunction App() {\n  //state를 통해 현재 상태를 자동으로 수신\n  //컴포넌트에서 활용할 데이터를 반환\n  /*\n  index.js의 코드를 살펴보면 아래와 같이 reudcer를 정의\n    const store = configureStore({\n      reducer:{ui:uiSlice.reducer}\n  })\n  따라서, 위 reducer의 키값 ui를 활용하여 이에 접근해야한다.\n  */\n  const showCart = useSelector(state=>state.ui.cartIsVisible);\n\n  const dispatch = useDispatch();\n\n  const cart = useSelector(state=>state.cart);\n  const notification = useSelector(state=>state.ui.notification())\n\n  //장바구니에 변경이 일어날 때 마다 요청이 날아감\n  useEffect(()=>{\n    const sendCartData= async()=>{\n      dispatch(uiActions.showNotification({\n        status:'pending',\n        tilte: 'Sending...',\n        message : 'Sending cart data!'\n      }))\n      const response = await fetch('https://react-practice-fd7f5-default-rtdb.firebaseio.com/cart.json',\n      {\n        method:'PUT', \n        body:JSON.stringify(cart)\n      });\n\n      if(!response.ok){\n      dispatch(uiActions.showNotification({\n        status:'error',\n        tilte: 'Error!',\n        message : 'Sent cart data failed...'\n      }))\n      }\n\n      dispatch(uiActions.showNotification({\n        status:'success',\n        tilte: 'Success!',\n        message : 'Sent cart data successfully!'\n      }))\n    };\n\n    sendCartData().catch(error=>{\n      dispatch(uiActions.showNotification({\n        status:'error',\n        tilte: 'Error!',\n        message : 'Sent cart data failed...'\n      }))\n    });\n  },[cart, dispatch]);\n\n  return (\n    <Fragment>\n      {notification && <Notification />}\n      <Layout>\n        {showCart && <Cart />}\n        <Products />\n      </Layout>\n    </Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}