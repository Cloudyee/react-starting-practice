{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\n\n//객체로 변환\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    //항목들\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      //해당 항목이 이미 존재하는지 여부 확인\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        //리덕스는 원래 본래의 값을 바꾸면 안된다.\n        //리덕스 툴킷에서 이를 자동으로 설정해주기 때문에 우리는 .push를 활용할 수 있다.\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        //id와 일치하지 않는 모든 항목을 유지\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\nconst sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n\n    //비동기 요청\n    const sendRequest = async () => {\n      const response = await fetch('https://react-practice-fd7f5-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        dispatch(uiActions.showNotification({\n          status: 'error',\n          title: 'Error!',\n          message: 'Sent cart data failed...'\n        }));\n        dispatch(uiActions.showNotification({\n          status: 'success',\n          title: 'Success!',\n          message: 'Sent cart data successfully!'\n        }));\n      }\n      ;\n    };\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","cartActions","actions"],"sources":["C:/Users/USER/Desktop/project/starting-project/redux-project/02-second-project/src/components/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\n//객체로 변환\r\nconst cartSlice = createSlice({\r\n    name:'cart',\r\n    initialState : {\r\n        items : [], //항목들\r\n        totalQuantity: 0 ,\r\n    },\r\n    reducers:{\r\n        addItemToCart(state, action){\r\n            const newItem = action.payload;\r\n            //해당 항목이 이미 존재하는지 여부 확인\r\n            const existingItem = state.items.find(item=> item.id === newItem.id);\r\n            state.totalQuantity++;\r\n            if(!existingItem){\r\n                //리덕스는 원래 본래의 값을 바꾸면 안된다.\r\n                //리덕스 툴킷에서 이를 자동으로 설정해주기 때문에 우리는 .push를 활용할 수 있다.\r\n                state.items.push({\r\n                    id: newItem.id, \r\n                    price: newItem.price, \r\n                    quantity: 1, \r\n                    totalPrice : newItem.price, \r\n                    name: newItem.title\r\n                });\r\n            }else{\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = existingItem.totalPrice+newItem.price;\r\n            }\r\n        },\r\n        removeItemFromCart(state, action){\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item=>item.id ===id);\r\n            state.totalQuantity--;\r\n            if(existingItem.quantity === 1){\r\n                //id와 일치하지 않는 모든 항목을 유지\r\n                state.items = state.items.filter(item=>item.id!==id);\r\n            } else{\r\n                existingItem.quantity --;\r\n                existingItem.totalPrice = existingItem.totalPrice-existingItem.price;\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nconst sendCartData = (cart) =>{\r\n    return async (dispatch)=>{\r\n        dispatch(uiActions.showNotification({\r\n            status:'pending',\r\n            title: 'Sending...',\r\n            message : 'Sending cart data!'\r\n          })\r\n        );\r\n\r\n        //비동기 요청\r\n        const sendRequest = async()=>{\r\n        \r\n            const response = await fetch('https://react-practice-fd7f5-default-rtdb.firebaseio.com/cart.json',\r\n            {\r\n                method:'PUT', \r\n                body:JSON.stringify(cart)\r\n            });\r\n        \r\n            if(!response.ok){\r\n            dispatch(uiActions.showNotification({\r\n                status:'error',\r\n                title: 'Error!',\r\n                message : 'Sent cart data failed...'\r\n            })\r\n            );\r\n            dispatch(uiActions.showNotification({\r\n                status:'success',\r\n                title: 'Success!',\r\n                message : 'Sent cart data successfully!'\r\n              }))\r\n            };\r\n        };     \r\n    };\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,YAAY;;AAEtC;AACA,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAC,MAAM;EACXC,YAAY,EAAG;IACXC,KAAK,EAAG,EAAE;IAAE;IACZC,aAAa,EAAE;EACnB,CAAC;EACDC,QAAQ,EAAC;IACLC,aAAaA,CAACC,KAAK,EAAEC,MAAM,EAAC;MACxB,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC9B;MACA,MAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAK,CAACS,IAAI,CAACC,IAAI,IAAGA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACpEP,KAAK,CAACH,aAAa,EAAE;MACrB,IAAG,CAACO,YAAY,EAAC;QACb;QACA;QACAJ,KAAK,CAACJ,KAAK,CAACY,IAAI,CAAC;UACbD,EAAE,EAAEL,OAAO,CAACK,EAAE;UACdE,KAAK,EAAEP,OAAO,CAACO,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAGT,OAAO,CAACO,KAAK;UAC1Bf,IAAI,EAAEQ,OAAO,CAACU;QAClB,CAAC,CAAC;MACN,CAAC,MAAI;QACDR,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAACT,OAAO,CAACO,KAAK;MACnE;IACJ,CAAC;IACDI,kBAAkBA,CAACb,KAAK,EAAEC,MAAM,EAAC;MAC7B,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO;MACzB,MAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAK,CAACS,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACC,EAAE,KAAIA,EAAE,CAAC;MAC1DP,KAAK,CAACH,aAAa,EAAE;MACrB,IAAGO,YAAY,CAACM,QAAQ,KAAK,CAAC,EAAC;QAC3B;QACAV,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACkB,MAAM,CAACR,IAAI,IAAEA,IAAI,CAACC,EAAE,KAAGA,EAAE,CAAC;MACxD,CAAC,MAAK;QACFH,YAAY,CAACM,QAAQ,EAAG;QACxBN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAACP,YAAY,CAACK,KAAK;MACxE;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMM,YAAY,GAAIC,IAAI,IAAI;EAC1B,OAAO,MAAOC,QAAQ,IAAG;IACrBA,QAAQ,CAACzB,SAAS,CAAC0B,gBAAgB,CAAC;MAChCC,MAAM,EAAC,SAAS;MAChBP,KAAK,EAAE,YAAY;MACnBQ,OAAO,EAAG;IACZ,CAAC,CACH,CAAC;;IAED;IACA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAS;MAEzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oEAAoE,EACjG;QACIC,MAAM,EAAC,KAAK;QACZC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACX,IAAI;MAC5B,CAAC,CAAC;MAEF,IAAG,CAACM,QAAQ,CAACM,EAAE,EAAC;QAChBX,QAAQ,CAACzB,SAAS,CAAC0B,gBAAgB,CAAC;UAChCC,MAAM,EAAC,OAAO;UACdP,KAAK,EAAE,QAAQ;UACfQ,OAAO,EAAG;QACd,CAAC,CACD,CAAC;QACDH,QAAQ,CAACzB,SAAS,CAAC0B,gBAAgB,CAAC;UAChCC,MAAM,EAAC,SAAS;UAChBP,KAAK,EAAE,UAAU;UACjBQ,OAAO,EAAG;QACZ,CAAC,CAAC,CAAC;MACL;MAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC;AAED,OAAO,MAAMS,WAAW,GAAGpC,SAAS,CAACqC,OAAO;AAE5C,eAAerC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}