{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n//객체로 변환\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    //항목들\n    totalQuantity: 0,\n    changed: false\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.items = action.payload.items;\n      state.totalQuantity = action.payload.totalQuantity;\n    },\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      //해당 항목이 이미 존재하는지 여부 확인\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        //리덕스는 원래 본래의 값을 바꾸면 안된다.\n        //리덕스 툴킷에서 이를 자동으로 설정해주기 때문에 우리는 .push를 활용할 수 있다.\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      state.changed = true;\n      if (existingItem.quantity === 1) {\n        //id와 일치하지 않는 모든 항목을 유지\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","changed","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","cartActions","actions"],"sources":["C:/Users/USER/Desktop/project/starting-project/redux-project/02-second-project/src/components/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n//객체로 변환\r\nconst cartSlice = createSlice({\r\n    name:'cart',\r\n    initialState : {\r\n        items : [], //항목들\r\n        totalQuantity: 0 ,\r\n        changed : false,\r\n    },\r\n    reducers:{\r\n        replaceCart(state,action){\r\n            state.items=action.payload.items;\r\n            state.totalQuantity=action.payload.totalQuantity;\r\n        },\r\n        addItemToCart(state, action){\r\n            const newItem = action.payload;\r\n            //해당 항목이 이미 존재하는지 여부 확인\r\n            const existingItem = state.items.find(item=> item.id === newItem.id);\r\n            state.totalQuantity++;\r\n            if(!existingItem){\r\n                //리덕스는 원래 본래의 값을 바꾸면 안된다.\r\n                //리덕스 툴킷에서 이를 자동으로 설정해주기 때문에 우리는 .push를 활용할 수 있다.\r\n                state.items.push({\r\n                    id: newItem.id, \r\n                    price: newItem.price, \r\n                    quantity: 1, \r\n                    totalPrice : newItem.price, \r\n                    name: newItem.title\r\n                });\r\n            }else{\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = existingItem.totalPrice+newItem.price;\r\n            }\r\n        },\r\n        removeItemFromCart(state, action){\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item=>item.id ===id);\r\n            state.totalQuantity--;\r\n            state.changed = true;\r\n            if(existingItem.quantity === 1){\r\n                //id와 일치하지 않는 모든 항목을 유지\r\n                state.items = state.items.filter(item=>item.id!==id);\r\n            } else{\r\n                existingItem.quantity --;\r\n                existingItem.totalPrice = existingItem.totalPrice-existingItem.price;\r\n            }\r\n        }\r\n    }\r\n});\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAC,MAAM;EACXC,YAAY,EAAG;IACXC,KAAK,EAAG,EAAE;IAAE;IACZC,aAAa,EAAE,CAAC;IAChBC,OAAO,EAAG;EACd,CAAC;EACDC,QAAQ,EAAC;IACLC,WAAWA,CAACC,KAAK,EAACC,MAAM,EAAC;MACrBD,KAAK,CAACL,KAAK,GAACM,MAAM,CAACC,OAAO,CAACP,KAAK;MAChCK,KAAK,CAACJ,aAAa,GAACK,MAAM,CAACC,OAAO,CAACN,aAAa;IACpD,CAAC;IACDO,aAAaA,CAACH,KAAK,EAAEC,MAAM,EAAC;MACxB,MAAMG,OAAO,GAAGH,MAAM,CAACC,OAAO;MAC9B;MACA,MAAMG,YAAY,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAACC,IAAI,IAAGA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;MACpER,KAAK,CAACJ,aAAa,EAAE;MACrB,IAAG,CAACS,YAAY,EAAC;QACb;QACA;QACAL,KAAK,CAACL,KAAK,CAACc,IAAI,CAAC;UACbD,EAAE,EAAEJ,OAAO,CAACI,EAAE;UACdE,KAAK,EAAEN,OAAO,CAACM,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAGR,OAAO,CAACM,KAAK;UAC1BjB,IAAI,EAAEW,OAAO,CAACS;QAClB,CAAC,CAAC;MACN,CAAC,MAAI;QACDR,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAACR,OAAO,CAACM,KAAK;MACnE;IACJ,CAAC;IACDI,kBAAkBA,CAACd,KAAK,EAAEC,MAAM,EAAC;MAC7B,MAAMO,EAAE,GAAGP,MAAM,CAACC,OAAO;MACzB,MAAMG,YAAY,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACC,EAAE,KAAIA,EAAE,CAAC;MAC1DR,KAAK,CAACJ,aAAa,EAAE;MACrBI,KAAK,CAACH,OAAO,GAAG,IAAI;MACpB,IAAGQ,YAAY,CAACM,QAAQ,KAAK,CAAC,EAAC;QAC3B;QACAX,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACoB,MAAM,CAACR,IAAI,IAAEA,IAAI,CAACC,EAAE,KAAGA,EAAE,CAAC;MACxD,CAAC,MAAK;QACFH,YAAY,CAACM,QAAQ,EAAG;QACxBN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAACP,YAAY,CAACK,KAAK;MACxE;IACJ;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,MAAMM,WAAW,GAAGxB,SAAS,CAACyB,OAAO;AAE5C,eAAezB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}