{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\n\n//식별자의 이름을 한번에 정의하고 이를 활용할 수 있다.\n//프로젝트가 커져 다양한 상태가 생기게 되면, 이러한 상태들을 한번에 복사해야하는 상황이 올 수 있다.\n//이러한 상황을 해결하기 위해 \n/*\r\n1. 아래와같이 설정하여 활용할 수 있다.\r\n2. 리듀서를 어려개의 리듀서로 나눌 수 있다.\r\n3. Redux toolkit이라는 써드 파티를 활용한다! => 해당 방법을 채택하여 활용한다!!!\r\n*/\nexport const INCREMENT = 'increment';\nconst intialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  //이를 사용하면 원래의 값을 변경시키지 않고도 손쉽게 이를 운용할 수 있다. \n  name: 'counter',\n  initialState: intialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {},\n    toggleCounter() {}\n  }\n});\nconst counterReducer = (state = intialState, action) => {\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'increase') {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'toggle') {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n  return state;\n};\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","INCREMENT","intialState","counter","showCounter","name","initialState","reducers","increment","state","decrement","increase","action","toggleCounter","counterReducer","type","amount","store"],"sources":["C:/Users/USER/Desktop/project/starting-project/redux-project/01-starting-project/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux'\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\n//식별자의 이름을 한번에 정의하고 이를 활용할 수 있다.\r\n//프로젝트가 커져 다양한 상태가 생기게 되면, 이러한 상태들을 한번에 복사해야하는 상황이 올 수 있다.\r\n//이러한 상황을 해결하기 위해 \r\n/*\r\n1. 아래와같이 설정하여 활용할 수 있다.\r\n2. 리듀서를 어려개의 리듀서로 나눌 수 있다.\r\n3. Redux toolkit이라는 써드 파티를 활용한다! => 해당 방법을 채택하여 활용한다!!!\r\n*/\r\nexport const INCREMENT = 'increment';\r\n\r\nconst intialState = {counter:0, showCounter:true};\r\ncreateSlice({ //이를 사용하면 원래의 값을 변경시키지 않고도 손쉽게 이를 운용할 수 있다. \r\n    name : 'counter',\r\n    initialState : intialState,\r\n    reducers : {\r\n        increment(state){\r\n            state.counter++;\r\n        },\r\n        decrement(state){\r\n            state.counter--;\r\n        },\r\n        increase(state,action){},\r\n        toggleCounter(){}\r\n    }\r\n});\r\n\r\n\r\nconst counterReducer = (state=intialState, action)=>{\r\n    if(action.type==='increment'){\r\n        return {\r\n            counter:state.counter+1,\r\n            showCounter:state.showCounter\r\n        }\r\n    }\r\n    if(action.type==='decrement'){\r\n        return{\r\n            counter:state.counter-1,\r\n            showCounter:state.showCounter\r\n\r\n        }\r\n    }\r\n    if(action.type==='increase'){\r\n        return{\r\n            counter:state.counter+action.amount,\r\n            showCounter:state.showCounter\r\n        }\r\n    }\r\n    if(action.type==='toggle'){\r\n        return{\r\n            showCounter:!state.showCounter,\r\n            counter:state.counter\r\n        };\r\n    }\r\n\r\n\r\n    return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,WAAW;AAEpC,MAAMC,WAAW,GAAG;EAACC,OAAO,EAAC,CAAC;EAAEC,WAAW,EAAC;AAAI,CAAC;AACjDJ,WAAW,CAAC;EAAE;EACVK,IAAI,EAAG,SAAS;EAChBC,YAAY,EAAGJ,WAAW;EAC1BK,QAAQ,EAAG;IACPC,SAASA,CAACC,KAAK,EAAC;MACZA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAC;MACZA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAACG,MAAM,EAAC,CAAC,CAAC;IACxBC,aAAaA,CAAA,EAAE,CAAC;EACpB;AACJ,CAAC,CAAC;AAGF,MAAMC,cAAc,GAAGA,CAACL,KAAK,GAACP,WAAW,EAAEU,MAAM,KAAG;EAChD,IAAGA,MAAM,CAACG,IAAI,KAAG,WAAW,EAAC;IACzB,OAAO;MACHZ,OAAO,EAACM,KAAK,CAACN,OAAO,GAAC,CAAC;MACvBC,WAAW,EAACK,KAAK,CAACL;IACtB,CAAC;EACL;EACA,IAAGQ,MAAM,CAACG,IAAI,KAAG,WAAW,EAAC;IACzB,OAAM;MACFZ,OAAO,EAACM,KAAK,CAACN,OAAO,GAAC,CAAC;MACvBC,WAAW,EAACK,KAAK,CAACL;IAEtB,CAAC;EACL;EACA,IAAGQ,MAAM,CAACG,IAAI,KAAG,UAAU,EAAC;IACxB,OAAM;MACFZ,OAAO,EAACM,KAAK,CAACN,OAAO,GAACS,MAAM,CAACI,MAAM;MACnCZ,WAAW,EAACK,KAAK,CAACL;IACtB,CAAC;EACL;EACA,IAAGQ,MAAM,CAACG,IAAI,KAAG,QAAQ,EAAC;IACtB,OAAM;MACFX,WAAW,EAAC,CAACK,KAAK,CAACL,WAAW;MAC9BD,OAAO,EAACM,KAAK,CAACN;IAClB,CAAC;EACL;EAGA,OAAOM,KAAK;AAChB,CAAC;AAED,MAAMQ,KAAK,GAAGlB,WAAW,CAACe,cAAc,CAAC;AAEzC,eAAeG,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}