{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport counterSlice from './counter';\nimport authSlice from './auth';\n\n//식별자의 이름을 한번에 정의하고 이를 활용할 수 있다.\n//프로젝트가 커져 다양한 상태가 생기게 되면, 이러한 상태들을 한번에 복사해야하는 상황이 올 수 있다.\n//이러한 상황을 해결하기 위해 \n/*\r\n1. 아래와같이 설정하여 활용할 수 있다.\r\n2. 리듀서를 어려개의 리듀서로 나눌 수 있다.\r\n3. Redux toolkit이라는 써드 파티를 활용한다! => 해당 방법을 채택하여 활용한다!!!\r\n*/\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","counterSlice","authSlice","store","reducer","counter","auth","counterActions","actions","authActions"],"sources":["C:/Users/USER/Desktop/project/starting-project/redux-project/01-starting-project/src/store/index.js"],"sourcesContent":["import {  configureStore } from '@reduxjs/toolkit';\r\nimport counterSlice from './counter'\r\nimport authSlice from './auth'\r\n\r\n//식별자의 이름을 한번에 정의하고 이를 활용할 수 있다.\r\n//프로젝트가 커져 다양한 상태가 생기게 되면, 이러한 상태들을 한번에 복사해야하는 상황이 올 수 있다.\r\n//이러한 상황을 해결하기 위해 \r\n/*\r\n1. 아래와같이 설정하여 활용할 수 있다.\r\n2. 리듀서를 어려개의 리듀서로 나눌 수 있다.\r\n3. Redux toolkit이라는 써드 파티를 활용한다! => 해당 방법을 채택하여 활용한다!!!\r\n*/\r\n\r\n\r\nconst store = configureStore({\r\n    reducer:{counter:counterSlice.reducer, auth: authSlice.reducer}\r\n});\r\n\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\nexport default store;"],"mappings":"AAAA,SAAUA,cAAc,QAAQ,kBAAkB;AAClD,OAAOC,YAAY,MAAM,WAAW;AACpC,OAAOC,SAAS,MAAM,QAAQ;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,KAAK,GAAGH,cAAc,CAAC;EACzBI,OAAO,EAAC;IAACC,OAAO,EAACJ,YAAY,CAACG,OAAO;IAAEE,IAAI,EAAEJ,SAAS,CAACE;EAAO;AAClE,CAAC,CAAC;AAGF,OAAO,MAAMG,cAAc,GAAGN,YAAY,CAACO,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGP,SAAS,CAACM,OAAO;AAC5C,eAAeL,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}